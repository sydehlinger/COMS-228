Overall, based off of Big O analysis Quicksort should be the most efficient sorting algorithm out of the 3. Quicksort has a Big O of O(n lg n) (and O(n^2) when the array is already sorted), however so does Mergesort. However, Quicksort is able to perform faster because it number of comparisons and swaps necessary to perform the sort is less than that of Mergesort making it more efficient even though they both have the same Big O analysis of O(n lg n). For the sets of data with 10 and 100 Mergesort performed every so slightly faster than Quicksort, and in the data with 1,000 it would either favor Mergesort or Quicksort, but by an extremely small margin. Getting into the data set with 10,000 and up Quicksort performed faster than Mergesort every time. Selectionsort performed the worst out of the three, which was to be expected by the Big O analysis. The average Big O case for Selectionsort is O(n^2), making it a very poor choice for big data sets. When compared to Quicksort and Mergesort in the data sets of size 10 and 100, its decently comparable just a little slower. However, when you hit 100 elements both Quicksort and Mergesort were around 0.005 seconds while Selectionsort jumped to 0.1 seconds. There was also a huge spike when Selectionsort was used on a data set with 10,000 as it took 11 seconds compared to the Quicksort's 0.06 and the Mergesort's 0.07.